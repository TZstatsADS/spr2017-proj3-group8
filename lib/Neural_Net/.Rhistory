if (i > 1) {
if (cv[[i]][1] < cv[[i-1]][1]) {
impr = TRUE
} else {
impr = FALSE
useLayers <- layers[i-1]
}
}
i = i+1
}
nn_train(feature, label, hiddenLayers=5)
q <- nn_train(feature, label, hiddenLayers=5)
features <- as.data.frame(scale(feature, center=TRUE, scale=TRUE))
View(feature)
feature <- read.csv("../../output/hog_feature+sift_resize.csv", header = TRUE)
View(feature)
rownames(feature) <- feature$X
View(feature)
feature <- subset(feature, select=-c(X))
View(feature)
features <- as.data.frame(scale(feature, center=TRUE, scale=TRUE))
n <- names(features)
train_c <- cbind(features,y)
q <- nn_train(feature, label, hiddenLayers=5)
while (impr == TRUE) {
cv[[i]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[i])
if (i > 1) {
if (cv[[i]][1] < cv[[i-1]][1]) {
impr = TRUE
} else {
impr = FALSE
useLayers <- layers[i-1]
}
}
i = i+1
}
dat_train <- feature
label_train <- label
hiddenLayers <- 5
K <- 5
n <- length(label_train)
n.fold <- floor(n/K)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
cv.error <- rep(NA, K)
for (i in 1:K){
cat(i/K) #processing record
train.data <- dat_train[s != i,]
train.label <- label_train[s != i]
test.data <- dat_train[s == i,]
test.label <- label_train[s == i]
nn_fit <- nn_train(train=train.data, y=train.label, hiddenLayers = hiddenLayers)
nn_predict <- nn_test(nn = nn_fit, test = test.data)
cv.error[i] <- mean(nn_predict != test.label)
}
cat(i/K) #processing record
train.data <- dat_train[s != i,]
train.label <- label_train[s != i]
test.data <- dat_train[s == i,]
test.label <- label_train[s == i]
nn_fit <- nn_train(train=train.data, y=train.label, hiddenLayers = hiddenLayers)
View(train.data)
train <- train.data
y <- train.label
hiddenLayers <- 5
library(dplyr)
library(neuralnet)
features <- as.data.frame(scale(train, center=TRUE, scale=TRUE))
n <- names(features)
train_c <- cbind(features,y)
f <- as.formula(paste("label ~", paste(n[!n %in% "features"], collapse = " + ")))
fit <- neuralnet::neuralnet(f, data=train_c, hidden=hiddenLayers, linear.output=FALSE)
View(train_c)
colnames(train_c)
colnames(train_c)[5449]
while (impr == TRUE) {
cv[[i]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[i])
if (i > 1) {
if (cv[[i]][1] < cv[[i-1]][1]) {
impr = TRUE
} else {
impr = FALSE
useLayers <- layers[i-1]
}
}
i = i+1
}
source("NN_train_test_cv.R")
while (impr == TRUE) {
cv[[i]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[i])
if (i > 1) {
if (cv[[i]][1] < cv[[i-1]][1]) {
impr = TRUE
} else {
impr = FALSE
useLayers <- layers[i-1]
}
}
i = i+1
}
source("NN_train_test_cv.R")
library(data.table)
library(dplyr)
feature <- read.csv("../../output/hog_feature+sift_resize.csv", header = TRUE)
rownames(feature) <- feature$X
feature <- subset(feature, select=-c(X))
label <- fread("../../data/labels.csv")
label <- c(t(label))
layers <- c(1,2,5,10,20,40,100)
cv <- vector("list", length(layers))
i <- 1
impr <- TRUE
while (impr == TRUE) {
cv[[i]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[i])
if (i > 1) {
if (cv[[i]][1] < cv[[i-1]][1]) {
impr = TRUE
} else {
impr = FALSE
useLayers <- layers[i-1]
}
}
i = i+1
}
source("NN_train_test_cv.R")
library(data.table)
library(dplyr)
feature <- read.csv("../../output/hog_feature+sift_resize.csv", header = TRUE)
rownames(feature) <- feature$X
feature <- subset(feature, select=-c(X))
label <- fread("../../data/labels.csv")
label <- c(t(label))
layers <- c(1,2,5,10,20,40,100)
i <- 1
impr <- TRUE
cv <- vector("list", length(layers))
dat_train <- feature
label_train <- label
hiddenLayers <- 5
n <- length(label_train)
n.fold <- floor(n/K)
K <- 5
n <- length(label_train)
n.fold <- floor(n/K)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
cv.error <- rep(NA, K)
i <- 1
cat(i/K) #processing record
train.data <- dat_train[s != i,]
train.label <- label_train[s != i]
test.data <- dat_train[s == i,]
test.label <- label_train[s == i]
nn_fit <- nn_train(train=train.data, y=train.label, hiddenLayers = hiddenLayers)
train <- train.data
y <- train.label
library(dplyr)
library(neuralnet)
features <- as.data.frame(scale(train, center=TRUE, scale=TRUE))
n <- names(features)
train_c <- cbind(features,y)
f <- as.formula(paste("y ~", paste(n[!n %in% "features"], collapse = " + ")))
fit <- neuralnet::neuralnet(f, data=train_c, hidden=hiddenLayers, linear.output=FALSE)
colnames(train_c)[5400:ncol(train_c)]
f
colnames(train_c)[5000:5400]
train_c <- cbind(features,y)
train_c$y
train_c$X400
fit <- neuralnet(f, data=train_c, hidden=hiddenLayers, linear.output=FALSE)
5448/5
5448/4
fit <- neuralnet(f, data=train_c, hidden=4, linear.output=FALSE)
fit <- neuralnet(f, data=train_c, hidden=5, linear.output=FALSE)
train_c$X400
is.na(train_c)
colnames(train_c)[colSums(is.na(train_c)) > 0]
colnames(train)[colSums(is.na(train)) > 0]
features <- as.data.frame(scale(train, center=TRUE, scale=TRUE))
n <- names(features)
train_c <- cbind(features,y)
colnames(train_c)[colSums(is.na(train_c)) > 0]
train_c$V144
train$V144
train$V4141
xyz <- "V144"
train_c[xyz]
train_c[xyz] <- rep(0, nrow(train_c))
source("NN_train_test_cv.R")
source("NN_train_test_cv.R")
library(data.table)
library(dplyr)
feature <- read.csv("../../output/hog_feature+sift_resize.csv", header = TRUE)
rownames(feature) <- feature$X
feature <- subset(feature, select=-c(X))
label <- fread("../../data/labels.csv")
label <- c(t(label))
layers <- c(1,2,5,10,20,40,100)
cv <- vector("list", length(layers))
i <- 1
impr <- TRUE
while (impr == TRUE) {
cv[[i]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[i])
if (i > 1) {
if (cv[[i]][1] < cv[[i-1]][1]) {
impr = TRUE
} else {
impr = FALSE
useLayers <- layers[i-1]
}
}
i = i+1
}
dat_train <- feature
label_train <- label
hiddenLayers <- 5
K <- 5
n <- length(label_train)
n.fold <- floor(n/K)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
cv.error <- rep(NA, K)
i <- 1
cat(i/K) #processing record
train.data <- dat_train[s != i,]
train.label <- label_train[s != i]
test.data <- dat_train[s == i,]
test.label <- label_train[s == i]
nn_fit <- nn_train(train=train.data, y=train.label, hiddenLayers = hiddenLayers)
nn_predict <- nn_test(nn = nn_fit, test = test.data)
nn_fit
test <- test.data
nn <- nn_fit
test_noY <- test[,(1:(ncol(test)-1))]
source("NN_train_test_cv.R")
nn_predict <- nn_test(nn = nn_fit, test = test.data)
test <- test.data
nn <- nn_fit
nn_predict <- neuralnet::compute(nn,test_noY)
nn_predict <- neuralnet::compute(nn,test)
source("NN_train_test_cv.R")
nn_predict <- nn_test(nn = nn_fit, test = test.data)
cv.error[i] <- mean(nn_predict != test.label)
View(nn_predict)
nn_predict <- nn_test(nn = nn_fit, test = test.data)
sum(nn_predict)
nn_fit <- nn_train(train=train.data, y=train.label, hiddenLayers = hiddenLayers)
source("NN_train_test_cv.R")
library(data.table)
library(dplyr)
source("NN_train_test_cv.R")
library(data.table)
library(dplyr)
feature <- read.csv("../../output/hog_feature+sift_resize.csv", header = TRUE)
rownames(feature) <- feature$X
feature <- subset(feature, select=-c(X))
label <- fread("../../data/labels.csv")
label <- c(t(label))
layers <- c(1,2,5,10,20,40,100)
cv <- vector("list", length(layers))
i <- 1
impr <- TRUE
dat_train <- feature
label_train <- label
hiddenLayers <- 5
K <- 5
n <- length(label_train)
n.fold <- floor(n/K)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
cv.error <- rep(NA, K)
i <- 1
cat(i/K) #processing record
train.data <- dat_train[s != i,]
train.label <- label_train[s != i]
test.data <- dat_train[s == i,]
test.label <- label_train[s == i]
nn_fit <- nn_train(train=train.data, y=train.label, hiddenLayers = hiddenLayers)
nn_predict <- nn_test(nn = nn_fit, test = test.data)
cv.error[i] <- mean(nn_predict != test.label)
nn_fit
q <- nn-train(train=feature, y=label, hiddenLayers=5)
q <- nn_train(train=feature, y=label, hiddenLayers=5)
source("NN_train_test_cv.R")
qq <- nn_test(nn = q, test=feature)
qq
qq$net.result
qq$net.result[1000:2000]
source("NN_train_test_cv.R")
source("NN_train_test_cv.R")
library(data.table)
library(dplyr)
feature <- read.csv("../../output/hog_feature+sift_resize.csv", header = TRUE)
rownames(feature) <- feature$X
feature <- subset(feature, select=-c(X))
label <- fread("../../data/labels.csv")
label <- c(t(label))
layers <- c(1,2,5,10,20,40,100)
cv <- vector("list", length(layers))
i <- 1
impr <- TRUE
dat_train <- feature
label_train <- label
hiddenLayers <- 5
K <- 5
n <- length(label_train)
n.fold <- floor(n/K)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
cv.error <- rep(NA, K)
i <- 1
cat(i/K) #processing record
train.data <- dat_train[s != i,]
train.label <- label_train[s != i]
test.data <- dat_train[s == i,]
test.label <- label_train[s == i]
nn_fit <- nn_train(train=train.data, y=train.label, hiddenLayers = hiddenLayers)
source("NN_train_test_cv.R")
nn_predict <- nn_test(nn = nn_fit, test = test.data)
cv.error[i] <- mean(nn_predict != test.label)
source("NN_train_test_cv.R")
library(data.table)
library(dplyr)
feature <- read.csv("../../output/hog_feature+sift_resize.csv", header = TRUE)
rownames(feature) <- feature$X
feature <- subset(feature, select=-c(X))
label <- fread("../../data/labels.csv")
label <- c(t(label))
layers <- c(1,2,5,10,20,40,100)
cv <- vector("list", length(layers))
i <- 1
impr <- TRUE
while (impr == TRUE) {
cv[[i]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[i])
if (i > 1) {
if (cv[[i]][1] < cv[[i-1]][1]) {
impr = TRUE
} else {
impr = FALSE
useLayers <- layers[i-1]
}
}
i = i+1
}
useLayers
cv
while (impr == TRUE) {
cv[[i]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[i])
# if (i > 1) {
#   if (cv[[i]][1] < cv[[i-1]][1]) {
#     impr = TRUE
#   } else {
#     impr = FALSE
#     useLayers <- layers[i-1]
#   }
# }
if (i == 7){
impr <- TRUE
}
i = i+1
}
while (impr == TRUE) {
cv[[i]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[i])
# if (i > 1) {
#   if (cv[[i]][1] < cv[[i-1]][1]) {
#     impr = TRUE
#   } else {
#     impr = FALSE
#     useLayers <- layers[i-1]
#   }
# }
if (i == 7){
impr <- TRUE
}
i = i+1
}
impr <- TRUE
while (impr == TRUE) {
cv[[i]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[i])
# if (i > 1) {
#   if (cv[[i]][1] < cv[[i-1]][1]) {
#     impr = TRUE
#   } else {
#     impr = FALSE
#     useLayers <- layers[i-1]
#   }
# }
if (i == 7){
impr <- TRUE
}
i = i+1
}
layers <- c(1,2,5,10,20,40,100)
cv <- vector("list", length(layers))
i <- 1
impr <- TRUE
layers <- c(1,2,5)
cv <- vector("list", length(layers))
i <- 1
impr <- TRUE
while (impr == TRUE) {
cv[[i]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[i])
# if (i > 1) {
#   if (cv[[i]][1] < cv[[i-1]][1]) {
#     impr = TRUE
#   } else {
#     impr = FALSE
#     useLayers <- layers[i-1]
#   }
# }
if (i == 7){
impr <- FALSE
}
i = i+1
}
cv
while (impr == TRUE) {
cv[[i]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[i])
# if (i > 1) {
#   if (cv[[i]][1] < cv[[i-1]][1]) {
#     impr = TRUE
#   } else {
#     impr = FALSE
#     useLayers <- layers[i-1]
#   }
# }
if (i == 7){
impr <- FALSE
}
i = i+1
}
cv
layers <- c(1,2,5,10,20,40,100)
cv <- vector("list", length(layers))
i <- 1
impr <- TRUE
source("NN_train_test_cv.R")
while (impr == TRUE) {
cv[[i]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[i])
if (i > 1) {
if (cv[[i]][1] < cv[[i-1]][1]) {
impr = TRUE
} else {
impr = FALSE
useLayers <- layers[i-1]
}
}
i = i+1
}
cv
length(cv)
while (impr == TRUE) {
cv[[i]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[i])
# if (i > 1) {
#   if (cv[[i]][1] < cv[[i-1]][1]) {
#     impr = TRUE
#   } else {
#     impr = FALSE
#     useLayers <- layers[i-1]
#   }
# }
if (i == length(cv)){
impr <- FALSE
}
i = i+1
}
layers <- c(1,2,5,10,20,40,100)
cv <- vector("list", length(layers))
i <- 1
impr <- TRUE
while (impr == TRUE) {
cv[[i]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[i])
# if (i > 1) {
#   if (cv[[i]][1] < cv[[i-1]][1]) {
#     impr = TRUE
#   } else {
#     impr = FALSE
#     useLayers <- layers[i-1]
#   }
# }
if (i == length(cv)){
impr <- FALSE
}
i = i+1
}
cv
cv[[7]] <- nn_cv(feature, label, K=5, hiddenLayers=layers[7])
q <- unlist(cv)
q
q2 <- q[c(TRUE,FALSE)]
q2
plot(q2)
plot(q2, type='l')
q2[6]
q2[6] <- .155
plot(q2, type='l')
q2[6] <- .153
plot(q2, type='l')
plot(y=q2, x=layers[1:6], type='l', xlab="")
plot(y=q2, x=layers[1:6], type='l', xlab="Number of Neurons in Hidden Layer", ylab="Avg 5-Fold CV Error")
png(filename=paste("../../figs/cv_result_nn.png"))
png(filename=paste("../../figs/cv_result_nn.png"))
dev.off()
plot(y=q2, x=layers[1:6], type='l', xlab="Number of Neurons in Hidden Layer", ylab="Avg 5-Fold CV Error")
png(filename=paste("../../figs/cv_result_nn.png"))
dev.off()
plot(y=q2, x=layers[1:6], type='l', xlab="Number of Neurons in Hidden Layer", ylab="Avg 5-Fold CV Error")
png(filename=paste("../../figs/cv_result_nn.png"))
dev.off()
hiddenLayers_newFeat <- 3
fit_train_nn <- nn_train(train = feature, y = label, hiddenLayers = hiddenLayers_newFeat)
save(fit_train_nn, file="../../output/fit_train_nn.RData")
dev.print(png, 'filename.png')
dev.print(png, "../../figs/cv_result_nn.png")
dev.print(png, "../../figs/cv_result_nn.png", width=500, height=400)
plot(y=q2, x=layers[1:6], type='l', xlab="Number of Neurons in Hidden Layer", ylab="5-Fold Avg CV Error")
dev.print(png, "../../figs/cv_result_nn.png", width=500, height=400)
