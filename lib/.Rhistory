x2 <- -2:2
y <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
persp(x1, x2, y)
par(bg = "white")
x1 <- seq(-2, 2, 0.01)
x2 <- seq(-2, 2, 0.01)
y <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue",
xlab = "x1", ylab = "x2", zlab = "f(x1,x2)")
par(bg = "white")
x1 <- seq(-2, 2, length = 30)
x2 <- seq(-2, 2, length = 30)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
z = outer(x1, x2, f)
z[is.na(z)] <- 1
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue",
xlab = "x1", ylab = "x2", zlab = "f(x1,x2)")
par(bg = "white")
x1 <- seq(-2, 2, length = 30)
x2 <- seq(-2, 2, length = 30)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
is.na(x1)
is.na(x2)
z = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue",
xlab = "x1", ylab = "x2", zlab = "f(x1,x2)")
x <- seq(from = -5, to = 5, by = 0.25)
y <- seq(from = -2, to = 2, by = 0.1)
f <- function(x, y){x**2 + 50*cos(y)}
z <- outer(x, y, f)
persp(x, y, f)
par(bg = "white")
x1 <- seq(-2, 2, length = 30)
x2 <- seq(-2, 2, length = 30)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
is.na(x1) = TRUE
is.na(x2) = TRUE
z = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue",
xlab = "x1", ylab = "x2", zlab = "f(x1,x2)")
x <- seq(from = -5, to = 5, by = 0.25)
y <- seq(from = -2, to = 2, by = 0.1)
f <- function(x, y){x**2 + 50*cos(y)}
is.na(x1) = TRUE
is.na(x2) = TRUE
z <- outer(x, y, f)
persp(x, y, f)
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
is.na(x1) = TRUE
is.na(x2) = TRUE
z = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue",
xlab = "x1", ylab = "x2", zlab = "f(x1,x2)")
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
z = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue",
xlab = "x1", ylab = "x2", zlab = "f(x1,x2)")
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
z = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue",
xlab = "x1", ylab = "x2", zlab = "f")
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
z = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
z = outer(x1, x2, f)
persp(x1, x2, z, theta = 30, phi = 30, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
z = outer(x1, x2, f)
persp(x1, x2, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
x <- seq(from = -5, to = 5, by = 0.25)
y <- seq(from = -2, to = 2, by = 0.1)
f <- function(x, y){x**2 + 50*cos(y)}
z <- outer(x, y, f)
persp(x, y, f)
x <- seq(from = -5, to = 5, by = 0.25)
y <- seq(from = -2, to = 2, by = 0.1)
f <- function(x, y){x**2 + 50*cos(y)}
z <- outer(x, y, f)
persp(x, y, z)
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
z = outer(x1, x2, f)
persp(x1, x2, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
z <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
f(x1,x2) = outer(x1, x2, z)
persp(x1, x2, f(x1,x2), theta = 30, phi = 30, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 30)
x2 <- seq(-2, 2, length = 30)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 30)
x2 <- seq(-2, 2, length = 30)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, expand = 1, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 30)
x2 <- seq(-2, 2, length = 30)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, expand = 0.1, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 30)
x2 <- seq(-2, 2, length = 30)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 0, phi = 15, expand = 1, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 15, expand = 1, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 15, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 135, phi = 30, expand = 0.5, col = "lightblue")
persp(x1, x2, y, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
persp(x1, x2, y, theta = 30, phi = 30, expand = 1, col = "lightblue")
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue")
```
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30)
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30)
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
f(x1,x2) = outer(x1, x2, f)
persp(x1, x2, f(x1,x2), theta = 30, phi = 30)
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30)
sample
data(cats, package = "MASS")
data(cats, package = "MASS")
head(cats)
states <- data.frame(state.x77, Region = state.region)
View(states)
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
apply(states, 2, mean)
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
apply(states, 1, mean)
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
apply(states[, 1:8], 2, mean)
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
ave <- apply(states[, 1:8], 2, mean)
which(states[, 1:8] > ave)
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
ave <- apply(states[, 1:8], 2, mean)
which(states[, 1:8] > rep(ave, each = nrow(states))
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
ave <- apply(states[, 1:8], 2, mean)
colSums(states[, 1:8] > rep(ave, each = nrow(states))
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
ave <- apply(states[, 1:8], 2, mean)
colSums(states[, 1:8] > rep(ave, each = nrow(states)))
cor.v1.v2 <- function(v1,v2=states[,"Frost"]) {
return(cor(v1,v2))
}
apply(states[,1:8],2,cor.v1.v2, v2=states[,"Frost"])
cor.v1.v2 <- function(v1,v2=states[,"Frost"]) {
return(cor(v1,v2))
}
apply(states[,1:8],2,cor.v1.v2)
apply(states[,1:8],2,cor, v2=states[,"Frost"])
?cor
cor.v1.v2 <- function(v1,v2=states[,"Frost"]) {
return(cor(v1,v2))
}
apply(states[,1:8],2,cor.v1.v2)
apply(states[,1:8],2,cor, y=states[,"Frost"])
state.division$states
states$state.divison
states$Divison <- state.division
View(states)
states$Divison <- state.division
tapply(states$Income, states$Divison, mean)
states$Divison <- state.division
tapply(states$Income, states$Divison, mean)
which.max(tapply(states$Income, states$Divison, mean))
states$Divison <- state.division
div.means <- tapply(states$Income, states$Divison, mean)
names(div.means)[which.max(div.means)]
df
exp(mean(log(states[ ,1:8]))
exp(mean(log(states[ ,1:8])))
exp(mean(log(states[ ,1:8])))
exp(colMeans(log(states[ ,1:8])))
join.list <- list(states$Region + states$Divison)
aggregate(states[,1:8], by=join.list, mean)
states.by.div <- split(states, f=states$Divison)
join.list <- list(states$Region, states$Divison)
aggregate(states[,1:8], by=join.list, mean)
states.by.div <- split(states, f=states$Divison)
join.list <- list(states$Region, states$Divison)
head(aggregate(states[,1:8], by=join.list, mean), 2)
states.by.div <- split(states, f=states$Divison)
join.list <- list(states$Region, states$Divison)
head(aggregate(states[,1:8], by=join.list, mean), 2)
states.by.div <- split(states, f=states$Divison)
length(states.by.div)
join.list <- list(states$Region, states$Divison)
head(aggregate(states[,1:8], by=join.list, mean), 2)
states.by.div <- split(states, f=states$Divison)
length(states.by.div)
lapply(states.by.div,head,2)
knitr::opts_chunk$set(echo = TRUE)
packages.used=c("tm", "wordcloud", "RColorBrewer", "ggplot2", "xml2",
"dplyr", "tidytext", "SnowballC", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(xml2)
library(tidytext)
library(SnowballC)
library(ggplot2)
library(topicmodels)
folder.path="../data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out<-substr(speeches, 6, nchar(speeches)-4)
prex.name<-unlist(strsplit(prex.out, split="-[I]*-?[1|2]"))
prex.term<-substr(prex.out, nchar(prex.out), nchar(prex.out))
datesfile<-list.files(path="../data", pattern = ".txt")
ff.all<-Corpus(DirSource(folder.path, encoding="UTF-8"))
rf_cv <- function(X.train, y.train, K=5, ntree=500, mtry=sqrt(ncol(X.train))){
n <- length(y.train)
n.fold <- floor(n/K)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
cv.error <- rep(NA, K)
for (i in 1:K){
train.data <- X.train[s != i,]
train.label <- y.train[s != i]
test.data <- X.train[s == i,]
test.label <- y.train[s == i]
rf_fit <- rf_train(dat_train = train.data, label_train = train.label, ntree = ntree, mtry = mtry)
rf_predict <- rf_test(fit_train = rf_fit, dat_test = test.data)
cv.error[i] <- mean(rf_predict != test.label)
}
error <- mean(cv.error)
sd <- sd(cv.error)
return(c(error, sd))
}
rf_cv <- function(X.train, y.train, K=5, ntree=500, mtry=sqrt(ncol(X.train))){
n <- length(y.train)
n.fold <- floor(n/K)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
cv.error <- rep(NA, K)
for (i in 1:K){
train.data <- X.train[s != i,]
train.label <- y.train[s != i]
test.data <- X.train[s == i,]
test.label <- y.train[s == i]
rf_fit <- rf_train(dat_train = train.data, label_train = train.label, ntree = ntree, mtry = mtry)
rf_predict <- rf_test(fit_train = rf_fit, dat_test = test.data)
cv.error[i] <- mean(rf_predict != test.label)
print(i) #processing record
}
error <- mean(cv.error)
sd <- sd(cv.error)
return(c(error, sd))
}
rf_cv(X.train = feature, y.train = label)
feature <- fread("../output/sift_features/sift_features.csv", header = TRUE)
label <- fread("../data/labels.csv")
label <- c(t(label))
feature <- tbl_df(t(feature))
setwd("E:/statistics/applied data science/Project3/spr2017-proj3-group8/lib")
feature <- fread("../output/sift_features/sift_features.csv", header = TRUE)
label <- fread("../data/labels.csv")
label <- c(t(label))
feature <- tbl_df(t(feature))
library(data.table)
library(EBImage)
feature <- fread("../output/sift_features/sift_features.csv", header = TRUE)
label <- fread("../data/labels.csv")
label <- c(t(label))
feature <- tbl_df(t(feature))
library(dplyr)
feature <- fread("../output/sift_features/sift_features.csv", header = TRUE)
label <- fread("../data/labels.csv")
label <- c(t(label))
feature <- tbl_df(t(feature))
rf_cv <- function(X.train, y.train, K=5, ntree=500, mtry=sqrt(ncol(X.train))){
n <- length(y.train)
n.fold <- floor(n/K)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
cv.error <- rep(NA, K)
for (i in 1:K){
train.data <- X.train[s != i,]
train.label <- y.train[s != i]
test.data <- X.train[s == i,]
test.label <- y.train[s == i]
rf_fit <- rf_train(dat_train = train.data, label_train = train.label, ntree = ntree, mtry = mtry)
rf_predict <- rf_test(fit_train = rf_fit, dat_test = test.data)
cv.error[i] <- mean(rf_predict != test.label)
print(i/K*100%) #processing record
}
error <- mean(cv.error)
sd <- sd(cv.error)
return(c(error, sd))
}
# Random Forest with cross-validation
rf_cv <- function(X.train, y.train, K=5, ntree=500, mtry=sqrt(ncol(X.train))){
n <- length(y.train)
n.fold <- floor(n/K)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
cv.error <- rep(NA, K)
for (i in 1:K){
train.data <- X.train[s != i,]
train.label <- y.train[s != i]
test.data <- X.train[s == i,]
test.label <- y.train[s == i]
rf_fit <- rf_train(dat_train = train.data, label_train = train.label, ntree = ntree, mtry = mtry)
rf_predict <- rf_test(fit_train = rf_fit, dat_test = test.data)
cv.error[i] <- mean(rf_predict != test.label)
print(i/K) #processing record
}
error <- mean(cv.error)
sd <- sd(cv.error)
return(c(error, sd))
}
# set working directory here
setwd_thisdir <- function () {
this.dir <- dirname(parent.frame(3)$ofile)
setwd(this.dir)
}
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
this.dir <- dirname(parent.frame(3)$ofile)
setwd(this.dir)
getwd()
this_dir <- function(directory)
setwd(file.path(getwd(), directory))
source("random forest_train_test_cv.R", chdir = TRUE)
this_dir <- function(directory){
setwd(file.path(getwd(), directory))
}
View(this_dir)
this_dir
library(data.table)
library(EBImage)
library(dplyr)
this_dir <- function(directory){
setwd(file.path(getwd(), directory))
}
getwd()
