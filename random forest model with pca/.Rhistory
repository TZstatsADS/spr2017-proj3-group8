z
A <- matrix(c(3,1,1,-2,1/2,1,1,-12,3), nrow = 3)
b <- c(-1, 2, 3)
solve(A, b)
x <- c(1, 2, 0)
A %*% x
52!
factorial()
factorial(52)
[factorial(13) / (factorial(3) * factorial(10))] ^ 4 * factorial(12) * factorial(40) / factorial(52)
(factorial(13) / (factorial(3) * factorial(10))) ^ 4 * factorial(12) * factorial(40) / factorial(52)
library("pixmap", lib.loc="d:/R/R-3.3.1/library")
casablanca_pic <- read.pnm("casablanca.pgm")
getwd()
list.files()
setwd(E:/statistics/R)
?function
1
function(x1, x2){(x1 + x2)^4 - 8(x1 + x2)^2}
plot(function(x1, x2){(x1 + x2)^4 - 8(x1 + x2)^2})
plot(function(x, y){(x + y)^4 - 8(x + y)^2})
y <= function(x1, x2){(x1 + x2)^4 - 8(x1 + x2)^2}
y <- function(x1, x2){(x1 + x2)^4 - 8(x1 + x2)^2}
plot(x1, x2, y)
persp(x1, x2, y)
function(x1, x2){y <- (x1 + x2)^4 - 8(x1 + x2)^2}
persp(x1, x2, y)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
x <- 1:9; names(x) <- x
# Multiplication & Power Tables
x %o% x
y <- 2:8; names(y) <- paste(y,":", sep = "")
outer(y, x, "^")
outer(month.abb, 1999:2003, FUN = "paste")
## three way multiplication table:
x %o% x %o% y[1:3]
par(bg = "white")
x <- seq(-1.95, 1.95, length = 30)
y <- seq(-1.95, 1.95, length = 35)
z <- outer(x, y, function(a, b) a*b^2)
nrz <- nrow(z)
ncz <- ncol(z)
# Create a function interpolating colors in the range of specified colors
jet.colors <- colorRampPalette( c("blue", "green") )
# Generate the desired number of colors from this palette
nbcol <- 100
color <- jet.colors(nbcol)
# Compute the z-value at the facet centres
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
# Recode facet z-values into color indices
facetcol <- cut(zfacet, nbcol)
persp(x, y, z, col = color[facetcol], phi = 30, theta = -30)
par(bg = "white")
x1 <- is.infinite(-2, 2)
par(bg = "white")
y <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
persp(x1, x2, y)
par(bg = "white")
x1 <- -2:2
x2 <- -2:2
y <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
persp(x1, x2, y)
par(bg = "white")
x1 <- seq(-2, 2, 0.01)
x2 <- seq(-2, 2, 0.01)
y <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue",
xlab = "x1", ylab = "x2", zlab = "f(x1,x2)")
par(bg = "white")
x1 <- seq(-2, 2, length = 30)
x2 <- seq(-2, 2, length = 30)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
z = outer(x1, x2, f)
z[is.na(z)] <- 1
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue",
xlab = "x1", ylab = "x2", zlab = "f(x1,x2)")
par(bg = "white")
x1 <- seq(-2, 2, length = 30)
x2 <- seq(-2, 2, length = 30)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
is.na(x1)
is.na(x2)
z = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue",
xlab = "x1", ylab = "x2", zlab = "f(x1,x2)")
x <- seq(from = -5, to = 5, by = 0.25)
y <- seq(from = -2, to = 2, by = 0.1)
f <- function(x, y){x**2 + 50*cos(y)}
z <- outer(x, y, f)
persp(x, y, f)
par(bg = "white")
x1 <- seq(-2, 2, length = 30)
x2 <- seq(-2, 2, length = 30)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
is.na(x1) = TRUE
is.na(x2) = TRUE
z = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue",
xlab = "x1", ylab = "x2", zlab = "f(x1,x2)")
x <- seq(from = -5, to = 5, by = 0.25)
y <- seq(from = -2, to = 2, by = 0.1)
f <- function(x, y){x**2 + 50*cos(y)}
is.na(x1) = TRUE
is.na(x2) = TRUE
z <- outer(x, y, f)
persp(x, y, f)
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
is.na(x1) = TRUE
is.na(x2) = TRUE
z = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue",
xlab = "x1", ylab = "x2", zlab = "f(x1,x2)")
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
z = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue",
xlab = "x1", ylab = "x2", zlab = "f(x1,x2)")
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
z = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue",
xlab = "x1", ylab = "x2", zlab = "f")
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
z = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
z = outer(x1, x2, f)
persp(x1, x2, z, theta = 30, phi = 30, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
z = outer(x1, x2, f)
persp(x1, x2, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
x <- seq(from = -5, to = 5, by = 0.25)
y <- seq(from = -2, to = 2, by = 0.1)
f <- function(x, y){x**2 + 50*cos(y)}
z <- outer(x, y, f)
persp(x, y, f)
x <- seq(from = -5, to = 5, by = 0.25)
y <- seq(from = -2, to = 2, by = 0.1)
f <- function(x, y){x**2 + 50*cos(y)}
z <- outer(x, y, f)
persp(x, y, z)
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
z = outer(x1, x2, f)
persp(x1, x2, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
z <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
f(x1,x2) = outer(x1, x2, z)
persp(x1, x2, f(x1,x2), theta = 30, phi = 30, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 100)
x2 <- seq(-2, 2, length = 100)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 30)
x2 <- seq(-2, 2, length = 30)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 30)
x2 <- seq(-2, 2, length = 30)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, expand = 1, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 30)
x2 <- seq(-2, 2, length = 30)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, expand = 0.1, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 30)
x2 <- seq(-2, 2, length = 30)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 0, phi = 15, expand = 1, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 15, expand = 1, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 15, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
par(bg = "white")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 135, phi = 30, expand = 0.5, col = "lightblue")
persp(x1, x2, y, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
persp(x1, x2, y, theta = 30, phi = 30, expand = 1, col = "lightblue")
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue")
```
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30, col = "lightblue")
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30)
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30)
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
f(x1,x2) = outer(x1, x2, f)
persp(x1, x2, f(x1,x2), theta = 30, phi = 30)
x1 <- seq(-2, 2, length = 50)
x2 <- seq(-2, 2, length = 50)
f <- function(x1, x2){
(x1 - 1)^2 + (x2 - 1)^2 + x1 * x2
}
y = outer(x1, x2, f)
persp(x1, x2, y, theta = 30, phi = 30)
sample
data(cats, package = "MASS")
data(cats, package = "MASS")
head(cats)
states <- data.frame(state.x77, Region = state.region)
View(states)
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
apply(states, 2, mean)
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
apply(states, 1, mean)
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
apply(states[, 1:8], 2, mean)
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
ave <- apply(states[, 1:8], 2, mean)
which(states[, 1:8] > ave)
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
ave <- apply(states[, 1:8], 2, mean)
which(states[, 1:8] > rep(ave, each = nrow(states))
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
ave <- apply(states[, 1:8], 2, mean)
colSums(states[, 1:8] > rep(ave, each = nrow(states))
states <- data.frame(state.x77, Region = state.region)
nrow(states[states$Frost >= 150, ])
which(states$Frost>=150)
ave <- apply(states[, 1:8], 2, mean)
colSums(states[, 1:8] > rep(ave, each = nrow(states)))
cor.v1.v2 <- function(v1,v2=states[,"Frost"]) {
return(cor(v1,v2))
}
apply(states[,1:8],2,cor.v1.v2, v2=states[,"Frost"])
cor.v1.v2 <- function(v1,v2=states[,"Frost"]) {
return(cor(v1,v2))
}
apply(states[,1:8],2,cor.v1.v2)
apply(states[,1:8],2,cor, v2=states[,"Frost"])
?cor
cor.v1.v2 <- function(v1,v2=states[,"Frost"]) {
return(cor(v1,v2))
}
apply(states[,1:8],2,cor.v1.v2)
apply(states[,1:8],2,cor, y=states[,"Frost"])
state.division$states
states$state.divison
states$Divison <- state.division
View(states)
states$Divison <- state.division
tapply(states$Income, states$Divison, mean)
states$Divison <- state.division
tapply(states$Income, states$Divison, mean)
which.max(tapply(states$Income, states$Divison, mean))
states$Divison <- state.division
div.means <- tapply(states$Income, states$Divison, mean)
names(div.means)[which.max(div.means)]
df
exp(mean(log(states[ ,1:8]))
exp(mean(log(states[ ,1:8])))
exp(mean(log(states[ ,1:8])))
exp(colMeans(log(states[ ,1:8])))
join.list <- list(states$Region + states$Divison)
aggregate(states[,1:8], by=join.list, mean)
states.by.div <- split(states, f=states$Divison)
join.list <- list(states$Region, states$Divison)
aggregate(states[,1:8], by=join.list, mean)
states.by.div <- split(states, f=states$Divison)
join.list <- list(states$Region, states$Divison)
head(aggregate(states[,1:8], by=join.list, mean), 2)
states.by.div <- split(states, f=states$Divison)
join.list <- list(states$Region, states$Divison)
head(aggregate(states[,1:8], by=join.list, mean), 2)
states.by.div <- split(states, f=states$Divison)
length(states.by.div)
join.list <- list(states$Region, states$Divison)
head(aggregate(states[,1:8], by=join.list, mean), 2)
states.by.div <- split(states, f=states$Divison)
length(states.by.div)
lapply(states.by.div,head,2)
knitr::opts_chunk$set(echo = TRUE)
packages.used=c("tm", "wordcloud", "RColorBrewer", "ggplot2", "xml2",
"dplyr", "tidytext", "SnowballC", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(xml2)
library(tidytext)
library(SnowballC)
library(ggplot2)
library(topicmodels)
folder.path="../data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out<-substr(speeches, 6, nchar(speeches)-4)
prex.name<-unlist(strsplit(prex.out, split="-[I]*-?[1|2]"))
prex.term<-substr(prex.out, nchar(prex.out), nchar(prex.out))
datesfile<-list.files(path="../data", pattern = ".txt")
ff.all<-Corpus(DirSource(folder.path, encoding="UTF-8"))
threshold_value <- c(0.8, 0.85, 0.9, 0.95)
# tune parameter for random forest: ntree
ntree <- seq(100, 1000, by=100)
err_cv <- matrix(NA, ncol=length(ntree), nrow=length(threshold_value))
for (i in 1:length(threshold_value)){
cat("i=", i, "\n")
threshold <- threshold_value[i]
# Extract features using PCA with threshold value
extractFeature <- feature.pca(dat_feature = feature, threshold = threshold)
for (j in 1:length(ntree)){
cat("j=", j, "\n")
err_cv[i,j] <- rf_cv(X.train = extractFeature, y.train = label, K = 5, ntree = ntree[j])[1]
}
}
save(err_cv, file="../output/err_cv_rf.RData")
setwd("E:/statistics/applied data science/Project3/spr2017-proj3-group8/random forest model with pca")
threshold_value <- c(0.8, 0.85, 0.9, 0.95)
# tune parameter for random forest: ntree
ntree <- seq(100, 1000, by=100)
err_cv <- matrix(NA, ncol=length(ntree), nrow=length(threshold_value))
for (i in 1:length(threshold_value)){
cat("i=", i, "\n")
threshold <- threshold_value[i]
# Extract features using PCA with threshold value
extractFeature <- feature.pca(dat_feature = feature, threshold = threshold)
for (j in 1:length(ntree)){
cat("j=", j, "\n")
err_cv[i,j] <- rf_cv(X.train = extractFeature, y.train = label, K = 5, ntree = ntree[j])[1]
}
}
save(err_cv, file="../output/err_cv_rf.RData")
source("../lib/random forest_train_test_cv.R")
source("../lib/PCA.R")
library(data.table)
library(dplyr)
feature <- fread("../output/sift_features/sift_features.csv", header = TRUE)
label <- fread("../data/labels.csv")
label <- c(t(label))
feature <- tbl_df(t(feature))
# Tune parameter of PCA: threshold
threshold_value <- c(0.8, 0.85, 0.9, 0.95)
# tune parameter for random forest: ntree
ntree <- seq(100, 1000, by=100)
err_cv <- matrix(NA, ncol=length(ntree), nrow=length(threshold_value))
for (i in 1:length(threshold_value)){
cat("i=", i, "\n")
threshold <- threshold_value[i]
# Extract features using PCA with threshold value
extractFeature <- feature.pca(dat_feature = feature, threshold = threshold)
for (j in 1:length(ntree)){
cat("j=", j, "\n")
err_cv[i,j] <- rf_cv(X.train = extractFeature, y.train = label, K = 5, ntree = ntree[j])[1]
}
}
View(err_cv)
plot(err_cv[1,])
ggplot(err_cv[1,])
library(ggplot2)
ggplot(err_cv[1,])
ggplot(data.frame(err_cv[1,]) )
